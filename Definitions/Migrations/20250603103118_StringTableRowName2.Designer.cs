// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenLoco.Definitions.Database;

#nullable disable

namespace Definitions.Migrations
{
    [DbContext(typeof(LocoDb))]
    [Migration("20250603103118_StringTableRowName2")]
    partial class StringTableRowName2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblDatObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DatChecksum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("xxHash3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("xxHash3")
                        .IsUnique();

                    b.HasIndex("DatName", "DatChecksum")
                        .IsUnique()
                        .IsDescending(true, false);

                    b.ToTable("DatObjects");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSource")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ObjectType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.Property<byte?>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ObjectPacks");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSource")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SC5Files");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SC5FilePacks");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblStringTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RowLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RowName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RowText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("RowText");

                    b.ToTable("TblStringTable");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TblAuthorTblObject", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("TblAuthorTblObject");
                });

            modelBuilder.Entity("TblAuthorTblObjectPack", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "ObjectPacksId");

                    b.HasIndex("ObjectPacksId");

                    b.ToTable("TblAuthorTblObjectPack");
                });

            modelBuilder.Entity("TblAuthorTblSC5File", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "SC5FilesId");

                    b.HasIndex("SC5FilesId");

                    b.ToTable("TblAuthorTblSC5File");
                });

            modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "SC5FilePacksId");

                    b.HasIndex("SC5FilePacksId");

                    b.ToTable("TblAuthorTblSC5FilePack");
                });

            modelBuilder.Entity("TblObjectPackTblTag", b =>
                {
                    b.Property<int>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectPacksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblObjectPackTblTag");
                });

            modelBuilder.Entity("TblObjectTblObjectPack", b =>
                {
                    b.Property<int>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectPacksId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("TblObjectTblObjectPack");
                });

            modelBuilder.Entity("TblObjectTblTag", b =>
                {
                    b.Property<int>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblObjectTblTag");
                });

            modelBuilder.Entity("TblSC5FilePackTblTag", b =>
                {
                    b.Property<int>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilePacksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblSC5FilePackTblTag");
                });

            modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
                {
                    b.Property<int>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilePacksId", "SC5FilesId");

                    b.HasIndex("SC5FilesId");

                    b.ToTable("TblSC5FileTblSC5FilePack");
                });

            modelBuilder.Entity("TblSC5FileTblTag", b =>
                {
                    b.Property<int>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblSC5FileTblTag");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblDatObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
                        .WithMany("DatObjects")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblStringTable", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
                        .WithMany("StringTable")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("TblAuthorTblObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblSC5File", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectPackTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectTblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FilePackTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FileTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.Navigation("DatObjects");

                    b.Navigation("StringTable");
                });
#pragma warning restore 612, 618
        }
    }
}

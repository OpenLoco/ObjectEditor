// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenLoco.Definitions.Database;

#nullable disable

namespace Definitions.Migrations
{
    [DbContext(typeof(LocoDbContext))]
    [Migration("20250630043418_SubObjectTPT")]
    partial class SubObjectTPT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblAuthor", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblDatObject", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DatChecksum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("xxHash3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("xxHash3")
                        .IsUnique();

                    b.HasIndex("DatName", "DatChecksum")
                        .IsUnique()
                        .IsDescending(true, false);

                    b.ToTable("DatObjects");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblLicence", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSource")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ObjectType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.Property<byte?>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Objects");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ObjectPacks");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSource")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SC5Files");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SC5FilePacks");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblStringTableRow", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("Text");

                    b.ToTable("StringTable");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblTag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AssociatedAuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedAuthorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblUserRole", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TblAuthorTblObject", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("TblAuthorTblObject");
                });

            modelBuilder.Entity("TblAuthorTblObjectPack", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "ObjectPacksId");

                    b.HasIndex("ObjectPacksId");

                    b.ToTable("TblAuthorTblObjectPack");
                });

            modelBuilder.Entity("TblAuthorTblSC5File", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "SC5FilesId");

                    b.HasIndex("SC5FilesId");

                    b.ToTable("TblAuthorTblSC5File");
                });

            modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "SC5FilePacksId");

                    b.HasIndex("SC5FilePacksId");

                    b.ToTable("TblAuthorTblSC5FilePack");
                });

            modelBuilder.Entity("TblObjectPackTblTag", b =>
                {
                    b.Property<ulong>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectPacksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblObjectPackTblTag");
                });

            modelBuilder.Entity("TblObjectTblObjectPack", b =>
                {
                    b.Property<ulong>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectPacksId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("TblObjectTblObjectPack");
                });

            modelBuilder.Entity("TblObjectTblTag", b =>
                {
                    b.Property<ulong>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblObjectTblTag");
                });

            modelBuilder.Entity("TblSC5FilePackTblTag", b =>
                {
                    b.Property<ulong>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilePacksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblSC5FilePackTblTag");
                });

            modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
                {
                    b.Property<ulong>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilePacksId", "SC5FilesId");

                    b.HasIndex("SC5FilesId");

                    b.ToTable("TblSC5FileTblSC5FilePack");
                });

            modelBuilder.Entity("TblSC5FileTblTag", b =>
                {
                    b.Property<ulong>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblSC5FileTblTag");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectAirport", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjAirport");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectBridge", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjBridge");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectBuilding", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjBuilding");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCargo", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjCargo");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCliffEdge", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjCliffEdge");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectClimate", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjClimate");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCompetitor", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjCompetitor");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCurrency", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjCurrency");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectDock", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjDock");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectHillShapes", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjHillShapes");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectIndustry", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjIndustry");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectInterface", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjInterface");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLand", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjLand");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLevelCrossing", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjLevelCrossing");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRegion", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjRegion");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoad", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjRoad");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoadExtra", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjRoadExtra");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoadStation", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjRoadStation");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectScaffolding", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjScaffolding");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectScenarioText", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjScenarioText");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSnow", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjSnow");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSound", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjSound");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSteam", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjSteam");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectStreetLight", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjStreetLight");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTownNames", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTownNames");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrack", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTrack");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackExtra", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTrackExtra");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackSignal", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTrackSignal");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackStation", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTrackStation");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTree", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTree");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTunnel", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjTunnel");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectVehicle", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjVehicle");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectWall", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjWall");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectWater", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.TblObject");

                    b.ToTable("ObjWater");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblDatObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
                        .WithMany("DatObjects")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblStringTableRow", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
                        .WithMany("StringTable")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblUser", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", "AssociatedAuthor")
                        .WithMany()
                        .HasForeignKey("AssociatedAuthorId");

                    b.Navigation("AssociatedAuthor");
                });

            modelBuilder.Entity("TblAuthorTblObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblSC5File", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectPackTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectTblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FilePackTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FileTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectAirport", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectAirport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectBridge", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectBridge", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectBuilding", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectBuilding", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCargo", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectCargo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCliffEdge", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectCliffEdge", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectClimate", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectClimate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCompetitor", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectCompetitor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCurrency", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectCurrency", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectDock", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectDock", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectHillShapes", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectHillShapes", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectIndustry", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectIndustry", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectInterface", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectInterface", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLand", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectLand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLevelCrossing", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectLevelCrossing", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRegion", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectRegion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoad", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectRoad", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoadExtra", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectRoadExtra", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoadStation", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectRoadStation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectScaffolding", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectScaffolding", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectScenarioText", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectScenarioText", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSnow", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectSnow", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSound", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectSound", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSteam", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectSteam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectStreetLight", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectStreetLight", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTownNames", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTownNames", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTrack", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackExtra", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTrackExtra", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackSignal", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTrackSignal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackStation", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTrackStation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTree", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTree", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTunnel", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectTunnel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectVehicle", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectVehicle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectWall", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectWall", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectWater", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithOne()
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObjectWater", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.Navigation("DatObjects");

                    b.Navigation("StringTable");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenLoco.Definitions.Database;

#nullable disable

namespace OpenLoco.Definitions.Database.Migrations
{
    [DbContext(typeof(LocoDbContext))]
    partial class LocoDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.DbSubObject", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DbSubObject");

                    b.HasDiscriminator().HasValue("DbSubObject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblAuthor", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblDatObject", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DatChecksum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("xxHash3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("xxHash3")
                        .IsUnique();

                    b.HasIndex("DatName", "DatChecksum")
                        .IsUnique()
                        .IsDescending(true, false);

                    b.ToTable("DatObjects");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblLicence", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSource")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ObjectType")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SubObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.Property<byte?>("VehicleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SubObjectId")
                        .IsUnique();

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ObjectPacks");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectSource")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SC5Files");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("LicenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UploadedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SC5FilePacks");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblStringTableRow", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("Text");

                    b.ToTable("StringTable");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblTag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("AssociatedAuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedAuthorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblUserRole", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TblAuthorTblObject", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("TblAuthorTblObject");
                });

            modelBuilder.Entity("TblAuthorTblObjectPack", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "ObjectPacksId");

                    b.HasIndex("ObjectPacksId");

                    b.ToTable("TblAuthorTblObjectPack");
                });

            modelBuilder.Entity("TblAuthorTblSC5File", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "SC5FilesId");

                    b.HasIndex("SC5FilesId");

                    b.ToTable("TblAuthorTblSC5File");
                });

            modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
                {
                    b.Property<ulong>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsId", "SC5FilePacksId");

                    b.HasIndex("SC5FilePacksId");

                    b.ToTable("TblAuthorTblSC5FilePack");
                });

            modelBuilder.Entity("TblObjectPackTblTag", b =>
                {
                    b.Property<ulong>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectPacksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblObjectPackTblTag");
                });

            modelBuilder.Entity("TblObjectTblObjectPack", b =>
                {
                    b.Property<ulong>("ObjectPacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectPacksId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("TblObjectTblObjectPack");
                });

            modelBuilder.Entity("TblObjectTblTag", b =>
                {
                    b.Property<ulong>("ObjectsId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObjectsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblObjectTblTag");
                });

            modelBuilder.Entity("TblSC5FilePackTblTag", b =>
                {
                    b.Property<ulong>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilePacksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblSC5FilePackTblTag");
                });

            modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
                {
                    b.Property<ulong>("SC5FilePacksId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilePacksId", "SC5FilesId");

                    b.HasIndex("SC5FilesId");

                    b.ToTable("TblSC5FileTblSC5FilePack");
                });

            modelBuilder.Entity("TblSC5FileTblTag", b =>
                {
                    b.Property<ulong>("SC5FilesId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SC5FilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblSC5FileTblTag");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectAirport", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<ushort>("AllowedPlaneTypes")
                        .HasColumnType("INTEGER");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("LargeTiles")
                        .HasColumnType("INTEGER");

                    b.Property<sbyte>("MaxX")
                        .HasColumnType("INTEGER");

                    b.Property<sbyte>("MaxY")
                        .HasColumnType("INTEGER");

                    b.Property<sbyte>("MinX")
                        .HasColumnType("INTEGER");

                    b.Property<sbyte>("MinY")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TblObjectAirport");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectBridge", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BaseCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ClearHeight")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<short>("DeckDepth")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DisabledTrackFlags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<short>("HeightCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MaxHeight")
                        .HasColumnType("INTEGER");

                    b.Property<short>("MaxSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PillarSpacing")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SpanLength")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("CostIndex")
                                .HasColumnName("TblObjectBridge_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectBridge_DesignedYear");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectBridge_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectBridge");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectBuilding", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("AverageNumberOnMap")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Colours")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<short>("DemolishRatingReduction")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("GeneratorFunction")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ScaffoldingColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ScaffoldingSegmentType")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("CostIndex")
                                .HasColumnName("TblObjectBuilding_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectBuilding_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectBuilding_Flags");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectBuilding_ObsoleteYear");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectBuilding_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectBuilding");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCargo", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<ushort>("CargoCategory")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CargoTransferTime")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MaxNonPremiumDays")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("MaxPremiumRate")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumPlatformVariations")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("PaymentFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PaymentIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("PenaltyRate")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PremiumDays")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("StationCargoDensity")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("UnitSize")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("Flags")
                                .HasColumnName("TblObjectCargo_Flags");
                        });

                    b.HasDiscriminator().HasValue("TblObjectCargo");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCliffEdge", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectCliffEdge");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectClimate", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("FirstSeason")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SeasonLength1")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SeasonLength2")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SeasonLength3")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SeasonLength4")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SummerSnowLine")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WinterSnowLine")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TblObjectClimate");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCompetitor", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("Aggressiveness")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AvailableNamePrefixes")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AvailablePlaystyles")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Competitiveness")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Emotions")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TblObjectCompetitor");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectCurrency", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("Factor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Separator")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TblObjectCurrency");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectDock", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BoatPositionX")
                        .HasColumnType("INTEGER");

                    b.Property<short>("BoatPositionY")
                        .HasColumnType("INTEGER");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumBuildingPartAnimations")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumBuildingVariationParts")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectDock_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectDock_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectDock_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectDock_Flags");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectDock_ObsoleteYear");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectDock_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectDock");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectHillShapes", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("HillHeightMapCount")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MountainHeightMapCount")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("Flags")
                                .HasColumnName("TblObjectHillShapes_Flags");
                        });

                    b.HasDiscriminator().HasValue("TblObjectHillShapes");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectIndustry", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BuildingSizeFlags")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Colours")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("FarmGrowthStageWithNoProduction")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("FarmIdealSize")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FarmImagesPerGrowthStage")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("FarmNumStagesOfGrowth")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("FarmTileNumImageAngles")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MapColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MaxNumBuildings")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MinNumBuildings")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MonthlyClosureChance")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ScaffoldingColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ScaffoldingSegmentType")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TotalOfTypeInScenario")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectIndustry_BuildCostFactor");

                            t.Property("Colours")
                                .HasColumnName("TblObjectIndustry_Colours");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectIndustry_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectIndustry_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectIndustry_Flags");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectIndustry_ObsoleteYear");

                            t.Property("ScaffoldingColour")
                                .HasColumnName("TblObjectIndustry_ScaffoldingColour");

                            t.Property("ScaffoldingSegmentType")
                                .HasColumnName("TblObjectIndustry_ScaffoldingSegmentType");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectIndustry_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectIndustry");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectInterface", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("Colour_11")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ErrorColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MapTooltipCargoColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("MapTooltipObjectColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PlayerInfoToolbarColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TimeToolbarColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TooltipColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TopToolbarPrimaryColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TopToolbarQuaternaryColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TopToolbarSecondaryColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TopToolbarTertiaryColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowConstructionColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowMapColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowOptionsColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowPlayerColor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowTerraFormColour")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindowTitlebarColour")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TblObjectInterface");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLand", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("CostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("DistributionPattern")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumGrowthStages")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumImageAngles")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("NumImagesPerGrowthStage")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumVariations")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("VariationLikelihood")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("CostIndex")
                                .HasColumnName("TblObjectLand_CostIndex");

                            t.Property("Flags")
                                .HasColumnName("TblObjectLand_Flags");
                        });

                    b.HasDiscriminator().HasValue("TblObjectLand");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLevelCrossing", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("AnimationSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ClosedFrames")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ClosingFrames")
                        .HasColumnType("INTEGER");

                    b.Property<short>("CostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("CostFactor")
                                .HasColumnName("TblObjectLevelCrossing_CostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectLevelCrossing_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectLevelCrossing_DesignedYear");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectLevelCrossing_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectLevelCrossing");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRegion", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectRegion");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoad", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("DisplayOffset")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<short>("MaxSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PaintStyle")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RoadPieces")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TargetTownSize")
                        .HasColumnType("INTEGER");

                    b.Property<short>("TunnelCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectRoad_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectRoad_CostIndex");

                            t.Property("Flags")
                                .HasColumnName("TblObjectRoad_Flags");

                            t.Property("MaxSpeed")
                                .HasColumnName("TblObjectRoad_MaxSpeed");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectRoad_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectRoad");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoadExtra", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PaintStyle")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RoadPieces")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectRoadExtra_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectRoadExtra_CostIndex");

                            t.Property("PaintStyle")
                                .HasColumnName("TblObjectRoadExtra_PaintStyle");

                            t.Property("RoadPieces")
                                .HasColumnName("TblObjectRoadExtra_RoadPieces");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectRoadExtra_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectRoadExtra");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectRoadStation", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CompatibleRoadObjectCount")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PaintStyle")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("RoadPieces")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectRoadStation_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectRoadStation_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectRoadStation_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectRoadStation_Flags");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectRoadStation_ObsoleteYear");

                            t.Property("PaintStyle")
                                .HasColumnName("TblObjectRoadStation_PaintStyle");

                            t.Property("RoadPieces")
                                .HasColumnName("TblObjectRoadStation_RoadPieces");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectRoadStation_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectRoadStation");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectScaffolding", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectScaffolding");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectScenarioText", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectScenarioText");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSnow", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectSnow");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSound", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("ShouldLoop")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TblObjectSound");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectSteam", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumStationaryTicks")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SpriteHeightNegative")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SpriteHeightPositive")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SpriteWidth")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("Flags")
                                .HasColumnName("TblObjectSteam_Flags");
                        });

                    b.HasDiscriminator().HasValue("TblObjectSteam");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectStreetLight", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectStreetLight");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTownNames", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectTownNames");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrack", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<short>("CurveSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("DisplayOffset")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("StationTrackPieces")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("TrackPieces")
                        .HasColumnType("INTEGER");

                    b.Property<short>("TunnelCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectTrack_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectTrack_CostIndex");

                            t.Property("DisplayOffset")
                                .HasColumnName("TblObjectTrack_DisplayOffset");

                            t.Property("Flags")
                                .HasColumnName("TblObjectTrack_Flags");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectTrack_SellCostFactor");

                            t.Property("TunnelCostFactor")
                                .HasColumnName("TblObjectTrack_TunnelCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectTrack");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackExtra", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PaintStyle")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("TrackPieces")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectTrackExtra_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectTrackExtra_CostIndex");

                            t.Property("PaintStyle")
                                .HasColumnName("TblObjectTrackExtra_PaintStyle");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectTrackExtra_SellCostFactor");

                            t.Property("TrackPieces")
                                .HasColumnName("TblObjectTrackExtra_TrackPieces");
                        });

                    b.HasDiscriminator().HasValue("TblObjectTrackExtra");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackSignal", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("AnimationSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumFrames")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("AnimationSpeed")
                                .HasColumnName("TblObjectTrackSignal_AnimationSpeed");

                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectTrackSignal_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectTrackSignal_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectTrackSignal_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectTrackSignal_Flags");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectTrackSignal_ObsoleteYear");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectTrackSignal_SellCostFactor");
                        });

                    b.HasDiscriminator().HasValue("TblObjectTrackSignal");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTrackStation", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("PaintStyle")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SellCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("TrackPieces")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectTrackStation_BuildCostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectTrackStation_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectTrackStation_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectTrackStation_Flags");

                            t.Property("Height")
                                .HasColumnName("TblObjectTrackStation_Height");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectTrackStation_ObsoleteYear");

                            t.Property("PaintStyle")
                                .HasColumnName("TblObjectTrackStation_PaintStyle");

                            t.Property("SellCostFactor")
                                .HasColumnName("TblObjectTrackStation_SellCostFactor");

                            t.Property("TrackPieces")
                                .HasColumnName("TblObjectTrackStation_TrackPieces");
                        });

                    b.HasDiscriminator().HasValue("TblObjectTrackStation");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTree", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("BuildCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<short>("ClearCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Clearance")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Colours")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<short>("DemolishRatingReduction")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumGrowthStages")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumRotations")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SeasonState")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ShadowImageOffset")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("BuildCostFactor")
                                .HasColumnName("TblObjectTree_BuildCostFactor");

                            t.Property("Colours")
                                .HasColumnName("TblObjectTree_Colours");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectTree_CostIndex");

                            t.Property("DemolishRatingReduction")
                                .HasColumnName("TblObjectTree_DemolishRatingReduction");

                            t.Property("Flags")
                                .HasColumnName("TblObjectTree_Flags");

                            t.Property("Height")
                                .HasColumnName("TblObjectTree_Height");

                            t.Property("NumGrowthStages")
                                .HasColumnName("TblObjectTree_NumGrowthStages");
                        });

                    b.HasDiscriminator().HasValue("TblObjectTree");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectTunnel", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.HasDiscriminator().HasValue("TblObjectTunnel");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectVehicle", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("CostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DesignedYear")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("DrivingSoundType")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumCarComponents")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumCompatibleVehicles")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("NumRequiredTrackExtras")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ObsoleteYear")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<short>("RackSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Reliability")
                        .HasColumnType("INTEGER");

                    b.Property<short>("RunCostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RunCostIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ShipWakeOffset")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TrackTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Weight")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("CostFactor")
                                .HasColumnName("TblObjectVehicle_CostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectVehicle_CostIndex");

                            t.Property("DesignedYear")
                                .HasColumnName("TblObjectVehicle_DesignedYear");

                            t.Property("Flags")
                                .HasColumnName("TblObjectVehicle_Flags");

                            t.Property("ObsoleteYear")
                                .HasColumnName("TblObjectVehicle_ObsoleteYear");
                        });

                    b.HasDiscriminator().HasValue("TblObjectVehicle");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectWall", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<byte>("Flags1")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Height")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("TblObjectWall_Height");
                        });

                    b.HasDiscriminator().HasValue("TblObjectWall");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectWater", b =>
                {
                    b.HasBaseType("OpenLoco.Definitions.Database.DbSubObject");

                    b.Property<short>("CostFactor")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CostIndex")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbSubObject", t =>
                        {
                            t.Property("CostFactor")
                                .HasColumnName("TblObjectWater_CostFactor");

                            t.Property("CostIndex")
                                .HasColumnName("TblObjectWater_CostIndex");
                        });

                    b.HasDiscriminator().HasValue("TblObjectWater");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblDatObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
                        .WithMany("DatObjects")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.HasOne("OpenLoco.Definitions.Database.DbSubObject", "SubObject")
                        .WithOne("Parent")
                        .HasForeignKey("OpenLoco.Definitions.Database.TblObject", "SubObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licence");

                    b.Navigation("SubObject");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.Navigation("Licence");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblStringTableRow", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
                        .WithMany("StringTable")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblUser", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", "AssociatedAuthor")
                        .WithMany()
                        .HasForeignKey("AssociatedAuthorId");

                    b.Navigation("AssociatedAuthor");
                });

            modelBuilder.Entity("TblAuthorTblObject", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblSC5File", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectPackTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectTblObjectPack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
                        .WithMany()
                        .HasForeignKey("ObjectPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblObjectTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FilePackTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
                        .WithMany()
                        .HasForeignKey("SC5FilePacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TblSC5FileTblTag", b =>
                {
                    b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
                        .WithMany()
                        .HasForeignKey("SC5FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.DbSubObject", b =>
                {
                    b.Navigation("Parent")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
                {
                    b.Navigation("DatObjects");

                    b.Navigation("StringTable");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenLoco.Definitions.Database;

#nullable disable

namespace Definitions.Migrations
{
	[DbContext(typeof(LocoDb))]
	partial class LocoDbModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblAuthor", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.ToTable("Authors", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblLicence", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<string>("Text")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("Name")
						.IsUnique();

					b.ToTable("Licences", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset?>("CreatedDate")
						.HasColumnType("TEXT");

					b.Property<uint>("DatChecksum")
						.HasColumnType("INTEGER");

					b.Property<string>("DatName")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<string>("Description")
						.HasColumnType("TEXT");

					b.Property<DateTimeOffset?>("ModifiedDate")
						.HasColumnType("TEXT");

					b.Property<int?>("LicenceId")
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<int>("ObjectSource")
						.HasColumnType("INTEGER");

					b.Property<byte>("ObjectType")
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset>("UploadedDate")
						.ValueGeneratedOnAddOrUpdate()
						.HasColumnType("TEXT")
						.HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

					b.Property<byte?>("VehicleType")
						.HasColumnType("INTEGER");

					b.HasKey("Id");

					b.HasIndex("LicenceId");

					b.HasIndex("Name")
						.IsUnique();

					b.HasIndex("DatName", "DatChecksum")
						.IsUnique()
						.IsDescending(true, false);

					b.ToTable("Objects", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset?>("CreatedDate")
						.HasColumnType("TEXT");

					b.Property<string>("Description")
						.HasColumnType("TEXT");

					b.Property<DateTimeOffset?>("ModifiedDate")
						.HasColumnType("TEXT");

					b.Property<int?>("LicenceId")
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<DateTimeOffset>("UploadedDate")
						.ValueGeneratedOnAddOrUpdate()
						.HasColumnType("TEXT")
						.HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

					b.HasKey("Id");

					b.HasIndex("LicenceId");

					b.HasIndex("Name")
						.IsUnique();

					b.ToTable("ObjectPacks", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLookupFromDat", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<uint>("DatChecksum")
						.HasColumnType("INTEGER");

					b.Property<string>("DatName")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<int>("ObjectId")
						.HasColumnType("INTEGER");

					b.Property<long>("xxHash3")
						.HasColumnType("INTEGER");

					b.HasKey("Id");

					b.HasIndex("ObjectId");

					b.HasIndex("xxHash3")
						.IsUnique();

					b.HasIndex("DatName", "DatChecksum")
						.IsUnique()
						.IsDescending(true, false);

					b.ToTable("ObjectDatLookups", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset?>("CreatedDate")
						.HasColumnType("TEXT");

					b.Property<string>("Description")
						.HasColumnType("TEXT");

					b.Property<DateTimeOffset?>("ModifiedDate")
						.HasColumnType("TEXT");

					b.Property<int?>("LicenceId")
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<int>("ObjectSource")
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset>("UploadedDate")
						.ValueGeneratedOnAddOrUpdate()
						.HasColumnType("TEXT")
						.HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

					b.HasKey("Id");

					b.HasIndex("LicenceId");

					b.HasIndex("Name")
						.IsUnique();

					b.ToTable("SC5Files", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset?>("CreatedDate")
						.HasColumnType("TEXT");

					b.Property<string>("Description")
						.HasColumnType("TEXT");

					b.Property<DateTimeOffset?>("ModifiedDate")
						.HasColumnType("TEXT");

					b.Property<int?>("LicenceId")
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<DateTimeOffset>("UploadedDate")
						.ValueGeneratedOnAddOrUpdate()
						.HasColumnType("TEXT")
						.HasDefaultValueSql("datetime(datetime('now', 'localtime'), 'utc')");

					b.HasKey("Id");

					b.HasIndex("LicenceId");

					b.HasIndex("Name")
						.IsUnique();

					b.ToTable("SC5FilePacks", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblTag", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("Name")
						.IsUnique();

					b.ToTable("Tags", (string)null);
				});

			modelBuilder.Entity("TblAuthorTblObject", b =>
				{
					b.Property<int>("AuthorsId")
						.HasColumnType("INTEGER");

					b.Property<int>("ObjectsId")
						.HasColumnType("INTEGER");

					b.HasKey("AuthorsId", "ObjectsId");

					b.HasIndex("ObjectsId");

					b.ToTable("TblAuthorTblObject", (string)null);
				});

			modelBuilder.Entity("TblAuthorTblObjectPack", b =>
				{
					b.Property<int>("AuthorsId")
						.HasColumnType("INTEGER");

					b.Property<int>("ObjectPacksId")
						.HasColumnType("INTEGER");

					b.HasKey("AuthorsId", "ObjectPacksId");

					b.HasIndex("ObjectPacksId");

					b.ToTable("TblAuthorTblObjectPack", (string)null);
				});

			modelBuilder.Entity("TblAuthorTblSC5File", b =>
				{
					b.Property<int>("AuthorsId")
						.HasColumnType("INTEGER");

					b.Property<int>("SC5FilesId")
						.HasColumnType("INTEGER");

					b.HasKey("AuthorsId", "SC5FilesId");

					b.HasIndex("SC5FilesId");

					b.ToTable("TblAuthorTblSC5File", (string)null);
				});

			modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
				{
					b.Property<int>("AuthorsId")
						.HasColumnType("INTEGER");

					b.Property<int>("SC5FilePacksId")
						.HasColumnType("INTEGER");

					b.HasKey("AuthorsId", "SC5FilePacksId");

					b.HasIndex("SC5FilePacksId");

					b.ToTable("TblAuthorTblSC5FilePack", (string)null);
				});

			modelBuilder.Entity("TblObjectPackTblTag", b =>
				{
					b.Property<int>("ObjectPacksId")
						.HasColumnType("INTEGER");

					b.Property<int>("TagsId")
						.HasColumnType("INTEGER");

					b.HasKey("ObjectPacksId", "TagsId");

					b.HasIndex("TagsId");

					b.ToTable("TblObjectPackTblTag", (string)null);
				});

			modelBuilder.Entity("TblObjectTblObjectPack", b =>
				{
					b.Property<int>("ObjectPacksId")
						.HasColumnType("INTEGER");

					b.Property<int>("ObjectsId")
						.HasColumnType("INTEGER");

					b.HasKey("ObjectPacksId", "ObjectsId");

					b.HasIndex("ObjectsId");

					b.ToTable("TblObjectTblObjectPack", (string)null);
				});

			modelBuilder.Entity("TblObjectTblTag", b =>
				{
					b.Property<int>("ObjectsId")
						.HasColumnType("INTEGER");

					b.Property<int>("TagsId")
						.HasColumnType("INTEGER");

					b.HasKey("ObjectsId", "TagsId");

					b.HasIndex("TagsId");

					b.ToTable("TblObjectTblTag", (string)null);
				});

			modelBuilder.Entity("TblSC5FilePackTblTag", b =>
				{
					b.Property<int>("SC5FilePacksId")
						.HasColumnType("INTEGER");

					b.Property<int>("TagsId")
						.HasColumnType("INTEGER");

					b.HasKey("SC5FilePacksId", "TagsId");

					b.HasIndex("TagsId");

					b.ToTable("TblSC5FilePackTblTag", (string)null);
				});

			modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
				{
					b.Property<int>("SC5FilePacksId")
						.HasColumnType("INTEGER");

					b.Property<int>("SC5FilesId")
						.HasColumnType("INTEGER");

					b.HasKey("SC5FilePacksId", "SC5FilesId");

					b.HasIndex("SC5FilesId");

					b.ToTable("TblSC5FileTblSC5FilePack", (string)null);
				});

			modelBuilder.Entity("TblSC5FileTblTag", b =>
				{
					b.Property<int>("SC5FilesId")
						.HasColumnType("INTEGER");

					b.Property<int>("TagsId")
						.HasColumnType("INTEGER");

					b.HasKey("SC5FilesId", "TagsId");

					b.HasIndex("TagsId");

					b.ToTable("TblSC5FileTblTag", (string)null);
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblObject", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
						.WithMany()
						.HasForeignKey("LicenceId");

					b.Navigation("Licence");
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectPack", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
						.WithMany()
						.HasForeignKey("LicenceId");

					b.Navigation("Licence");
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblObjectLookupFromDat", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblObject", "Object")
						.WithMany()
						.HasForeignKey("ObjectId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Object");
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5File", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
						.WithMany()
						.HasForeignKey("LicenceId");

					b.Navigation("Licence");
				});

			modelBuilder.Entity("OpenLoco.Definitions.Database.TblSC5FilePack", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblLicence", "Licence")
						.WithMany()
						.HasForeignKey("LicenceId");

					b.Navigation("Licence");
				});

			modelBuilder.Entity("TblAuthorTblObject", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
						.WithMany()
						.HasForeignKey("AuthorsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
						.WithMany()
						.HasForeignKey("ObjectsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblAuthorTblObjectPack", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
						.WithMany()
						.HasForeignKey("AuthorsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
						.WithMany()
						.HasForeignKey("ObjectPacksId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblAuthorTblSC5File", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
						.WithMany()
						.HasForeignKey("AuthorsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
						.WithMany()
						.HasForeignKey("SC5FilesId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblAuthorTblSC5FilePack", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblAuthor", null)
						.WithMany()
						.HasForeignKey("AuthorsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
						.WithMany()
						.HasForeignKey("SC5FilePacksId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblObjectPackTblTag", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
						.WithMany()
						.HasForeignKey("ObjectPacksId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
						.WithMany()
						.HasForeignKey("TagsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblObjectTblObjectPack", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblObjectPack", null)
						.WithMany()
						.HasForeignKey("ObjectPacksId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
						.WithMany()
						.HasForeignKey("ObjectsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblObjectTblTag", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblObject", null)
						.WithMany()
						.HasForeignKey("ObjectsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
						.WithMany()
						.HasForeignKey("TagsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblSC5FilePackTblTag", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
						.WithMany()
						.HasForeignKey("SC5FilePacksId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
						.WithMany()
						.HasForeignKey("TagsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblSC5FileTblSC5FilePack", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblSC5FilePack", null)
						.WithMany()
						.HasForeignKey("SC5FilePacksId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
						.WithMany()
						.HasForeignKey("SC5FilesId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("TblSC5FileTblTag", b =>
				{
					b.HasOne("OpenLoco.Definitions.Database.TblSC5File", null)
						.WithMany()
						.HasForeignKey("SC5FilesId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("OpenLoco.Definitions.Database.TblTag", null)
						.WithMany()
						.HasForeignKey("TagsId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});
#pragma warning restore 612, 618
		}
	}
}
